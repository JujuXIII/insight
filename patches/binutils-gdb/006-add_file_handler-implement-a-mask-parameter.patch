diff -Naurp binutils-gdb.orig/gdb/event-loop.c binutils-gdb.new/gdb/event-loop.c
--- binutils-gdb.orig/gdb/event-loop.c	2017-10-21 17:24:43.370671512 +0100
+++ binutils-gdb.new/gdb/event-loop.c	2017-10-21 17:25:22.728752093 +0100
@@ -37,13 +37,6 @@
 #include "observer.h"
 #include "top.h"
 
-/* Tell create_file_handler what events we are interested in.
-   This is used by the select version of the event loop.  */
-
-#define GDB_READABLE	(1<<1)
-#define GDB_WRITABLE	(1<<2)
-#define GDB_EXCEPTION	(1<<3)
-
 /* Data point to pass to the event handler.  */
 typedef union event_data
 {
@@ -283,7 +276,7 @@ initialize_async_signal_handlers (void)
   async_signal_handlers_serial_event = make_serial_event ();
 
   add_file_handler (serial_event_fd (async_signal_handlers_serial_event),
-		    async_signals_handler, NULL);
+		    0, async_signals_handler, NULL);
 }
 
 /* Timer function to cancel gdb_wait_for_event.
@@ -446,11 +439,16 @@ start_event_loop (void)
    doesn't have to know implementation details about the use of poll
    vs. select.  */
 void
-add_file_handler (int fd, handler_func * proc, gdb_client_data client_data)
+add_file_handler (int fd, int mask, handler_func * proc,
+                  gdb_client_data client_data)
 {
 #ifdef HAVE_POLL
   struct pollfd fds;
 #endif
+  int pollmask;
+
+  if (!mask)
+    mask = GDB_READABLE | GDB_EXCEPTION;
 
   if (use_poll)
     {
@@ -460,8 +458,16 @@ add_file_handler (int fd, handler_func *
          m68k-motorola-sys, `poll' cannot be used to wait for `stdin'.
          On m68k-motorola-sysv, tty's are not stream-based and not
          `poll'able.  */
+      pollmask = 0;
+      if (mask & GDB_READABLE)
+        pollmask |= POLLIN | POLLRDHUP;
+      if (mask & GDB_WRITABLE)
+        pollmask |= POLLOUT;
+      if (mask & GDB_EXCEPTION)
+        pollmask |= POLLPRI;
       fds.fd = fd;
-      fds.events = POLLIN;
+      fds.events = pollmask;
+
       if (poll (&fds, 1, 0) == 1 && (fds.revents & POLLNVAL))
 	use_poll = 0;
 #else
@@ -472,15 +478,14 @@ add_file_handler (int fd, handler_func *
   if (use_poll)
     {
 #ifdef HAVE_POLL
-      create_file_handler (fd, POLLIN, proc, client_data);
+      create_file_handler (fd, pollmask, proc, client_data);
 #else
       internal_error (__FILE__, __LINE__,
 		      _("use_poll without HAVE_POLL"));
 #endif
     }
   else
-    create_file_handler (fd, GDB_READABLE | GDB_EXCEPTION, 
-			 proc, client_data);
+    create_file_handler (fd, mask, proc, client_data);
 }
 
 /* Add a file handler/descriptor to the list of descriptors we are
diff -Naurp binutils-gdb.orig/gdb/event-loop.h binutils-gdb.new/gdb/event-loop.h
--- binutils-gdb.orig/gdb/event-loop.h	2017-10-21 17:24:43.370671512 +0100
+++ binutils-gdb.new/gdb/event-loop.h	2017-10-21 17:25:22.729752120 +0100
@@ -69,6 +69,12 @@
 
 #include "gdb_sys_time.h"
 
+/* Tell add_file_handler what events we are interested in. */
+
+#define GDB_READABLE	(1<<1)
+#define GDB_WRITABLE	(1<<2)
+#define GDB_EXCEPTION	(1<<3)
+
 typedef void *gdb_client_data;
 struct async_signal_handler;
 struct async_event_handler;
@@ -82,7 +88,7 @@ typedef void (timer_handler_func) (gdb_c
 extern void start_event_loop (void);
 extern int gdb_do_one_event (struct timeval *expiration);
 extern void delete_file_handler (int fd);
-extern void add_file_handler (int fd, handler_func *proc, 
+extern void add_file_handler (int fd, int mask, handler_func *proc, 
 			      gdb_client_data client_data);
 extern struct async_signal_handler *
   create_async_signal_handler (sig_handler_func *proc, 
diff -Naurp binutils-gdb.orig/gdb/event-top.c binutils-gdb.new/gdb/event-top.c
--- binutils-gdb.orig/gdb/event-top.c	2017-10-08 15:03:35.839292259 +0100
+++ binutils-gdb.new/gdb/event-top.c	2017-10-21 17:25:22.730752148 +0100
@@ -519,7 +519,7 @@ stdin_event_handler (int error, gdb_clie
 void
 ui_register_input_event_handler (struct ui *ui)
 {
-  add_file_handler (ui->input_fd, stdin_event_handler, ui);
+  add_file_handler (ui->input_fd, 0, stdin_event_handler, ui);
 }
 
 /* See top.h.  */
diff -Naurp binutils-gdb.orig/gdb/linux-nat.c binutils-gdb.new/gdb/linux-nat.c
--- binutils-gdb.orig/gdb/linux-nat.c	2017-10-14 18:22:05.574711204 +0100
+++ binutils-gdb.new/gdb/linux-nat.c	2017-10-21 17:25:22.731752175 +0100
@@ -4525,7 +4525,7 @@ linux_nat_async (struct target_ops *ops,
     {
       if (!linux_async_pipe (1))
 	{
-	  add_file_handler (linux_nat_event_pipe[0],
+	  add_file_handler (linux_nat_event_pipe[0], 0,
 			    handle_target_event, NULL);
 	  /* There may be pending events to handle.  Tell the event loop
 	     to poll them.  */
diff -Naurp binutils-gdb.orig/gdb/python/python.c binutils-gdb.new/gdb/python/python.c
--- binutils-gdb.orig/gdb/python/python.c	2017-10-14 18:22:05.581711273 +0100
+++ binutils-gdb.new/gdb/python/python.c	2017-10-21 17:25:22.732752203 +0100
@@ -1079,7 +1079,7 @@ gdbpy_initialize_events (void)
 
   gdbpy_serial_event = make_serial_event ();
   add_file_handler (serial_event_fd (gdbpy_serial_event),
-		    gdbpy_run_events, NULL);
+		    0, gdbpy_run_events, NULL);
 
   return 0;
 }
diff -Naurp binutils-gdb.orig/gdb/ser-base.c binutils-gdb.new/gdb/ser-base.c
--- binutils-gdb.orig/gdb/ser-base.c	2017-10-21 17:22:13.722191948 +0100
+++ binutils-gdb.new/gdb/ser-base.c	2017-10-21 17:27:12.152405613 +0100
@@ -82,7 +82,7 @@ reschedule (struct serial *scb)
 	case NOTHING_SCHEDULED:
 	  if (scb->bufcnt == 0)
 	    {
-	      add_file_handler (scb->fd, fd_event, scb);
+	      add_file_handler (scb->fd, 0, fd_event, scb);
 	      next_state = FD_SCHEDULED;
 	    }
 	  else
@@ -94,7 +94,7 @@ reschedule (struct serial *scb)
 	  if (scb->bufcnt == 0)
 	    {
 	      delete_timer (scb->async_state);
-	      add_file_handler (scb->fd, fd_event, scb);
+	      add_file_handler (scb->fd, 0, fd_event, scb);
 	      next_state = FD_SCHEDULED;
 	    }
 	  else
@@ -596,7 +596,7 @@ ser_base_async (struct serial *scb,
       reschedule (scb);
 
       if (scb->error_fd != -1)
-	add_file_handler (scb->error_fd, handle_error_fd, scb);
+	add_file_handler (scb->error_fd, 0, handle_error_fd, scb);
     }
   else
     {
diff -Naurp binutils-gdb.orig/gdb/tui/tui-io.c binutils-gdb.new/gdb/tui/tui-io.c
--- binutils-gdb.orig/gdb/tui/tui-io.c	2017-04-30 17:15:04.025187504 +0100
+++ binutils-gdb.new/gdb/tui/tui-io.c	2017-10-21 17:25:22.732752203 +0100
@@ -591,7 +591,7 @@ tui_initialize_io (void)
   (void) fcntl (tui_readline_pipe[0], F_SETFL, O_NDELAY);
 #endif
 #endif
-  add_file_handler (tui_readline_pipe[0], tui_readline_output, 0);
+  add_file_handler (tui_readline_pipe[0], 0, tui_readline_output, 0);
 #else
   tui_rl_outstream = stdout;
 #endif
