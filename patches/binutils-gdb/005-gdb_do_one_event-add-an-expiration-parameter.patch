diff -Naurp binutils-gdb.orig/gdb/event-loop.c binutils-gdb.new/gdb/event-loop.c
--- binutils-gdb.orig/gdb/event-loop.c	2016-07-30 16:03:29.710728947 +0100
+++ binutils-gdb.new/gdb/event-loop.c	2016-10-28 12:34:54.592738054 +0100
@@ -286,17 +286,29 @@ initialize_async_signal_handlers (void)
 		    async_signals_handler, NULL);
 }
 
+/* Timer function to cancel gdb_wait_for_event.
+   Should normally never be called. */
+static void
+cancel_wait (gdb_client_data clientdata)
+{
+  int * idp = (int *) clientdata;
+
+  *idp = 0; /* Timer has already been deleted. */
+}
+
 /* Process one high level event.  If nothing is ready at this time,
    wait for something to happen (via gdb_wait_for_event), then process
    it.  Returns >0 if something was done otherwise returns <0 (this
    can happen if there are no event sources to wait for).  */
 
 int
-gdb_do_one_event (void)
+gdb_do_one_event (struct timeval *expiration)
 {
   static int event_source_head = 0;
   const int number_of_sources = 3;
   int current = 0;
+  int timerid = 0;
+  int res = 0;
 
   /* First let's see if there are any asynchronous signal handlers
      that are ready.  These would be the result of invoking any of the
@@ -308,8 +320,6 @@ gdb_do_one_event (void)
      round-robin fashion.  */
   for (current = 0; current < number_of_sources; current++)
     {
-      int res;
-
       switch (event_source_head)
 	{
 	case 0:
@@ -342,14 +352,40 @@ gdb_do_one_event (void)
   /* Block waiting for a new event.  If gdb_wait_for_event returns -1,
      we should get out because this means that there are no event
      sources left.  This will make the event loop stop, and the
-     application exit.  */
+     application exit.
+     If an expiration time has been given, a new timer is set accordingly
+     to adjust wait timeout computation.  It is deleted upon
+     gdb_wait_for_event termination and thus should never be triggered.
+     When the expiration time has already been reached, events are not
+     monitored again: they already have been checked in the loop above. */
 
-  if (gdb_wait_for_event (1) < 0)
-    return -1;
+  if (expiration)
+    {
+      struct timeval tv;
+      int ms = 0;
 
-  /* If gdb_wait_for_event has returned 1, it means that one event has
-     been handled.  We break out of the loop.  */
-  return 1;
+      gettimeofday (&tv, NULL);
+      if (tv.tv_sec > expiration->tv_sec)
+        return res;
+      tv.tv_sec = expiration->tv_sec - tv.tv_sec;
+      if (tv.tv_usec > expiration->tv_usec)
+        {
+          if (!tv.tv_sec)
+            return res;
+          tv.tv_usec = 1000000 + expiration->tv_usec - tv.tv_usec;
+          tv.tv_sec--;
+        }
+      else
+        tv.tv_usec = expiration->tv_usec - tv.tv_usec;
+      ms = tv.tv_sec * 1000 + tv.tv_usec / 1000;
+      if (!ms)
+        return res;
+      timerid = create_timer (ms, cancel_wait, (gdb_client_data) &timerid);
+    }
+  res = gdb_wait_for_event (1);
+  if (timerid)
+    delete_timer (timerid);
+  return res;
 }
 
 /* Start up the event loop.  This is the entry point to the event loop
@@ -368,7 +404,7 @@ start_event_loop (void)
 
       TRY
 	{
-	  result = gdb_do_one_event ();
+	  result = gdb_do_one_event (NULL);
 	}
       CATCH (ex, RETURN_MASK_ALL)
 	{
diff -Naurp binutils-gdb.orig/gdb/event-loop.h binutils-gdb.new/gdb/event-loop.h
--- binutils-gdb.orig/gdb/event-loop.h	2016-07-30 16:03:29.711728955 +0100
+++ binutils-gdb.new/gdb/event-loop.h	2016-10-28 12:34:54.593738064 +0100
@@ -67,6 +67,8 @@
 
    Corollary tasks are the creation and deletion of event sources.  */
 
+#include "gdb_sys_time.h"
+
 typedef void *gdb_client_data;
 struct async_signal_handler;
 struct async_event_handler;
@@ -78,7 +80,7 @@ typedef void (timer_handler_func) (gdb_c
 /* Exported functions from event-loop.c */
 
 extern void start_event_loop (void);
-extern int gdb_do_one_event (void);
+extern int gdb_do_one_event (struct timeval *expiration);
 extern void delete_file_handler (int fd);
 extern void add_file_handler (int fd, handler_func *proc, 
 			      gdb_client_data client_data);
diff -Naurp binutils-gdb.orig/gdb/top.c binutils-gdb.new/gdb/top.c
--- binutils-gdb.orig/gdb/top.c	2016-10-28 11:35:18.679159905 +0100
+++ binutils-gdb.new/gdb/top.c	2016-10-28 12:34:54.593738064 +0100
@@ -543,7 +543,7 @@ wait_sync_command_done (void)
   scoped_restore save_ui = make_scoped_restore (&current_ui);
   struct ui *ui = current_ui;
 
-  while (gdb_do_one_event () >= 0)
+  while (gdb_do_one_event (NULL) >= 0)
     if (ui->prompt_state != PROMPT_BLOCKED)
       break;
 }
@@ -1020,7 +1020,7 @@ gdb_readline_wrapper (const char *prompt
     (*after_char_processing_hook) ();
   gdb_assert (after_char_processing_hook == NULL);
 
-  while (gdb_do_one_event () >= 0)
+  while (gdb_do_one_event (NULL) >= 0)
     if (gdb_readline_wrapper_done)
       break;
 
